#pragma once
#include "GameObject.h"
#include "AliveGameObject.h"

#include "Animation.h"
#include "Animations.h"

#include "debug.h"

#define MARIO_WALKING_SPEED		0.1f
#define MARIO_RUNNING_SPEED		0.2f

#define MARIO_ACCEL_WALK_X	0.0005f
#define MARIO_ACCEL_RUN_X	0.0007f

#define MARIO_JUMP_SPEED_Y		0.5f
#define MARIO_JUMP_RUN_SPEED_Y	0.6f

#define MARIO_GRAVITY			0.002f
#define MARIO_LOW_GRAVITY			0.0005f
#define MARIO_REVERSED_GRAVITY			0.0005f

#define MARIO_JUMP_DEFLECT_SPEED  0.4f

#define MARIO_STATE_DIE				-10
#define MARIO_STATE_IDLE			0
#define MARIO_STATE_WALKING_RIGHT	100
#define MARIO_STATE_WALKING_LEFT	200

#define MARIO_STATE_JUMP			300
#define MARIO_STATE_RELEASE_JUMP    301
#define MARIO_STATE_GLIDE			302
#define MARIO_STATE_FLYING			303

#define MARIO_STATE_RUNNING_RIGHT	400
#define MARIO_STATE_RUNNING_LEFT	500

#define MARIO_STATE_SIT				600
#define MARIO_STATE_SIT_RELEASE		601

#define MARIO_STATE_ATTACK			700
#define MARIO_STATE_DESCENDING			800
#define MARIO_STATE_ASCENDING			801

#define MARIO_STATE_MAP_MOVING_UP			900
#define MARIO_STATE_MAP_MOVING_DOWN			901
#define MARIO_STATE_MAP_MOVING_LEFT			902
#define MARIO_STATE_MAP_MOVING_RIGHT		903
#define MARIO_STATE_MAP_IDLE				904


#pragma region ANIMATION_ID

#define ID_ANI_MARIO_IDLE_RIGHT 400
#define ID_ANI_MARIO_IDLE_LEFT 401

#define ID_ANI_MARIO_WALKING_RIGHT 500
#define ID_ANI_MARIO_WALKING_LEFT 501

#define ID_ANI_MARIO_RUNNING_RIGHT 600
#define ID_ANI_MARIO_RUNNING_LEFT 601

#define ID_ANI_MARIO_JUMP_WALK_RIGHT 700
#define ID_ANI_MARIO_JUMP_WALK_LEFT 701

#define ID_ANI_MARIO_JUMP_RUN_RIGHT 800
#define ID_ANI_MARIO_JUMP_RUN_LEFT 801

#define ID_ANI_MARIO_SIT_RIGHT 900
#define ID_ANI_MARIO_SIT_LEFT 901

#define ID_ANI_MARIO_BRACE_RIGHT 1000
#define ID_ANI_MARIO_BRACE_LEFT 1001

#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_IDLE_RIGHT 410
#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_IDLE_LEFT 412

#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_RUNNING_RIGHT 510
#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_RUNNING_LEFT 511

#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_JUMP_RUN_RIGHT 610
#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_JUMP_RUN_LEFT 611

#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_WALKING_RIGHT 710
#define ID_ANI_MARIO_BIG_HOLDING_KOOPA_WALKING_LEFT 711

#define ID_ANI_MARIO_DIE 999

// SMALL MARIO
#define ID_ANI_MARIO_SMALL_IDLE_RIGHT 1100
#define ID_ANI_MARIO_SMALL_IDLE_LEFT 1102

#define ID_ANI_MARIO_SMALL_WALKING_RIGHT 1200
#define ID_ANI_MARIO_SMALL_WALKING_LEFT 1201

#define ID_ANI_MARIO_SMALL_RUNNING_RIGHT 1300
#define ID_ANI_MARIO_SMALL_RUNNING_LEFT 1301

#define ID_ANI_MARIO_SMALL_BRACE_RIGHT 1400
#define ID_ANI_MARIO_SMALL_BRACE_LEFT 1401

#define ID_ANI_MARIO_SMALL_JUMP_WALK_RIGHT 1500
#define ID_ANI_MARIO_SMALL_JUMP_WALK_LEFT 1501

#define ID_ANI_MARIO_SMALL_JUMP_RUN_RIGHT 1600
#define ID_ANI_MARIO_SMALL_JUMP_RUN_LEFT 1601

#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_IDLE_RIGHT 1110
#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_IDLE_LEFT 1112

#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_RUNNING_RIGHT 1210
#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_RUNNING_LEFT 1211

#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_JUMP_RUN_RIGHT 1310
#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_JUMP_RUN_LEFT 1311

#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_WALKING_RIGHT 1410
#define ID_ANI_MARIO_SMALL_HOLDING_KOOPA_WALKING_LEFT 1411

// Tanooki Mario

#define ID_ANI_MARIO_TANOOKI_IDLE_RIGHT 1700
#define ID_ANI_MARIO_TANOOKI_IDLE_LEFT 1701

#define ID_ANI_MARIO_TANOOKI_WALKING_RIGHT 1800
#define ID_ANI_MARIO_TANOOKI_WALKING_LEFT 1801

#define ID_ANI_MARIO_TANOOKI_RUNNING_RIGHT 1900
#define ID_ANI_MARIO_TANOOKI_RUNNING_LEFT 1901

#define ID_ANI_MARIO_TANOOKI_JUMP_WALK_RIGHT 2000
#define ID_ANI_MARIO_TANOOKI_JUMP_WALK_LEFT 2001

#define ID_ANI_MARIO_TANOOKI_JUMP_RUN_RIGHT 2100
#define ID_ANI_MARIO_TANOOKI_JUMP_RUN_LEFT 2101

#define ID_ANI_MARIO_TANOOKI_SIT_RIGHT 2200
#define ID_ANI_MARIO_TANOOKI_SIT_LEFT 2201

#define ID_ANI_MARIO_TANOOKI_BRACE_RIGHT 2300
#define ID_ANI_MARIO_TANOOKI_BRACE_LEFT 2301

#define ID_ANI_MARIO_TANOOKI_ATTACK_RIGHT 2400
#define ID_ANI_MARIO_TANOOKI_ATTACK_LEFT 2401

#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_IDLE_RIGHT 2501
#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_IDLE_LEFT 2502

#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_RUNNING_RIGHT 2503
#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_RUNNING_LEFT 2504

#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_JUMP_RUN_RIGHT 2505
#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_JUMP_RUN_LEFT 2506

#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_WALKING_RIGHT 2507
#define ID_ANI_MARIO_TANOOKI_HOLDING_KOOPA_WALKING_LEFT 2508

#define ID_ANI_MARIO_TANOOKI_IDLE_FRONT 2509

// Tanooki's tail

#define ID_ANI_MARIO_TANOOKI_TAIL_IDLE_RIGHT 1710
#define ID_ANI_MARIO_TANOOKI_TAIL_IDLE_LEFT 1711

#define ID_ANI_MARIO_TANOOKI_TAIL_WALKING_RIGHT 1810
#define ID_ANI_MARIO_TANOOKI_TAIL_WALKING_LEFT 1811

#define ID_ANI_MARIO_TANOOKI_TAIL_RUNNING_RIGHT 1910
#define ID_ANI_MARIO_TANOOKI_TAIL_RUNNING_LEFT 1911

#define ID_ANI_MARIO_TANOOKI_TAIL_JUMP_WALK_RIGHT 2010
#define ID_ANI_MARIO_TANOOKI_TAIL_JUMP_WALK_LEFT 2011

#define ID_ANI_MARIO_TANOOKI_TAIL_JUMP_RUN_RIGHT 2110
#define ID_ANI_MARIO_TANOOKI_TAIL_JUMP_RUN_LEFT 2111

#define ID_ANI_MARIO_TANOOKI_TAIL_SIT_RIGHT 2210
#define ID_ANI_MARIO_TANOOKI_TAIL_SIT_LEFT 2211

#define ID_ANI_MARIO_TANOOKI_TAIL_BRACE_RIGHT 2310
#define ID_ANI_MARIO_TANOOKI_TAIL_BRACE_LEFT 2311

#define ID_ANI_MARIO_TANOOKI_TAIL_ATTACK_RIGHT 2410
#define ID_ANI_MARIO_TANOOKI_TAIL_ATTACK_LEFT 2418

#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_IDLE_RIGHT 2511
#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_IDLE_LEFT 2512

#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_RUNNING_RIGHT 2513
#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_RUNNING_LEFT 2514

#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_JUMP_RUN_RIGHT 2515
#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_JUMP_RUN_LEFT 2516

#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_WALKING_RIGHT 2517
#define ID_ANI_MARIO_TANOOKI_TAIL_HOLDING_KOOPA_WALKING_LEFT 2518

// kicking animation

#define ID_ANI_MARIO_SMALL_KICK_LEFT 2411
#define ID_ANI_MARIO_SMALL_KICK_RIGHT 2412

#define ID_ANI_MARIO_BIG_KICK_LEFT 2413
#define ID_ANI_MARIO_BIG_KICK_RIGHT 2414

#define ID_ANI_MARIO_TANOOKI_KICK_LEFT 2415
#define ID_ANI_MARIO_TANOOKI_KICK_RIGHT 2416

// WORLD MAP MARIO
#define ID_ANI_MARIO_MAP 2600

#pragma endregion

#define GROUND_Y 160.0f




#define	MARIO_LEVEL_SMALL	1
#define	MARIO_LEVEL_BIG		2
#define	MARIO_LEVEL_TANOOKI		3
#define	MARIO_LEVEL_MAP		4

#define MARIO_BIG_BBOX_WIDTH  14
#define MARIO_BIG_BBOX_HEIGHT 24
#define MARIO_BIG_SITTING_BBOX_WIDTH  14
#define MARIO_BIG_SITTING_BBOX_HEIGHT 16

#define MARIO_TANOOKI_BBOX_WIDTH  14
#define MARIO_TANOOKI_BBOX_HEIGHT 24
#define MARIO_TANOOKI_SITTING_BBOX_WIDTH  14
#define MARIO_TANOOKI_SITTING_BBOX_HEIGHT 16

#define MARIO_SIT_HEIGHT_ADJUST ((MARIO_BIG_BBOX_HEIGHT-MARIO_BIG_SITTING_BBOX_HEIGHT)/2)

#define MARIO_SMALL_BBOX_WIDTH  13
#define MARIO_SMALL_BBOX_HEIGHT 12


#define MARIO_UNTOUCHABLE_TIME 2500
#define MARIO_LOW_GRAVITY_TIME 400

#define MARIO_ATTACKING_TIME 700

class CMario : public CAliveGameObject
{
	BOOLEAN isSitting;
	float maxVx;
	float ax;				// acceleration on x 
	float ay;				// acceleration on y 

	int level; 

	int untouchable;
	ULONGLONG untouchable_start;

	ULONGLONG low_gravity_start;

	int isAttacking;
	ULONGLONG attacking_start;

	int isKicking;
	ULONGLONG kicking_start;

	int isDescending;
	ULONGLONG descending_start;

	BOOLEAN isOnPlatform;
	int coin; 

	void OnCollisionWithGoomba(LPCOLLISIONEVENT e);
	void OnCollisionWithCoin(LPCOLLISIONEVENT e);
	void OnCollisionWithPortal(LPCOLLISIONEVENT e);

	void OnCollisionWithMushroom(LPCOLLISIONEVENT e);
	void OnCollisionWithLeaf(LPCOLLISIONEVENT e);
	void OnCollisionWithBrick(LPCOLLISIONEVENT e);
	void OnCollisionWithMysteryBlock(LPCOLLISIONEVENT e);
	void OnCollisionWithPiranha(LPCOLLISIONEVENT e);
	void OnCollisionWithCoinBlock(LPCOLLISIONEVENT e);
	void OnCollisionWithKoopa(LPCOLLISIONEVENT e);
	void OnCollisionWithFireball(LPCOLLISIONEVENT e);
	void OnCollisionWithParaGoomba(LPCOLLISIONEVENT e);
	void OnCollisionWithWingKoopa(LPCOLLISIONEVENT e);
	void OnCollisionWithWarpPipe(LPCOLLISIONEVENT e);
	void OnCollisionWithBlackPipe(LPCOLLISIONEVENT e);
	void OnCollisionWithGlassMysteryBrick(LPCOLLISIONEVENT e);

	int GetAniIdTanooki();
	int GetAniIdTanookiTail();
	int GetAniIdBig();
	int GetAniIdSmall();

public:
	static CMario* __instance;

	int isPressingA = 0;
	int isPressingUp = 0;
	int isHoldingKoopa = 0;

	int isMapMoving = 0;
	ULONGLONG map_moving_start = -1;

	int onMapTop = 0;
	int onMapRight = 0;

	CMario(float x, float y, int marioLevel) : CAliveGameObject(x, y)
	{
		this->x = x;
		this->y = y;
		isSitting = false;
		maxVx = 0.0f;
		ax = 0.0f;
		ay = MARIO_GRAVITY;

		level = marioLevel;

		untouchable = 0;
		untouchable_start = -1;

		low_gravity_start = -1;

		isAttacking = 0;
		attacking_start = -1;

		isKicking = 0;
		kicking_start = -1;

		isDescending = 0;
		descending_start = -1;

		isOnPlatform = false;
		coin = 0;

		this->isFreezable = 1;

	}
	void Update(DWORD dt, vector<LPGAMEOBJECT>* coObjects);
	void Render();
	void SetState(int state);

	int IsCollidable()
	{ 
		return (state != MARIO_STATE_DIE && level != MARIO_LEVEL_MAP); 
	}

	int IsBlocking() { return (state != MARIO_STATE_DIE && level != MARIO_LEVEL_MAP && untouchable==0); }

	void OnNoCollision(DWORD dt);
	void OnCollisionWith(LPCOLLISIONEVENT e);

	void SetLevel(int l);
	void StartUntouchable() { untouchable = 1; untouchable_start = GetTickCount64(); }
	void StartLowGravity() { 
		if (isPressingA == 0)
		{
			ay = MARIO_LOW_GRAVITY; 
		}
		else
		{
			ay = MARIO_LOW_GRAVITY;
		}
		low_gravity_start = GetTickCount64(); 
	}
	void StartAttacking() {
		isAttacking = 1;
		attacking_start = GetTickCount64();
	}
	void StartKicking() {
		isKicking = 1;
		kicking_start = GetTickCount64();
	}
	void StartMapMoving() {
		isMapMoving = 1;
		map_moving_start = GetTickCount64();
	}
	void StartDescending() {
		isDescending = 1;
		descending_start = GetTickCount64();
	}

	void GetBoundingBox(float& left, float& top, float& right, float& bottom);

	int Getnx() { return this->nx; }
	int GetLevel() { return this->level; }

	int IsMarioAttacking() { return isAttacking; }
};